类：类的定义应该是放在面向对象的标题里，但是一般函数定义在类里面，从这个范围来说，在这记录了类。
类和对象是面向对象编程的两个主要方面。
类：创建一个新类型，而对象是这个类的实例，类使用class关键字创建。
类的域和方法被列在一个缩进块中。
注意：在python语言中，不管什么类型的实例都被看做对象，如整数也被作为对象看待，它属于int类，这和其他语言c++,java把整数纯粹作为类型是不同的。

”域“的概念：属于一个对象或类的变量被称为域，其实就是类里面定义的变量。
域 — — 类的变量和对象的变量
1：类的变量：由一个类的所有对象（实例）共享使用，只有一个类变量的拷贝，所以当某个对象对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。
理解为：其实它就是一个类的全局变量，类实例化后的对象都可以调用该变量。
2：对象的变量： 由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不是共享的，
在同一个类的不同实例中，虽然对象的变量有相同的名称，但是是互不相关的。
即不同的对象调用该变量，其值改变后互不影响，跟C#的语法一样。
属于类级别的变量，在使用它的时候一定要带上类型名字 比如 MyClass.name
属于每个对象级别的变量，在调用的时候一定要带上self表明属于当前对象，如self.name
域（变量）和方法（函数）可以合称为类的属性

类的方法：
类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，但是在调用这个方法的时候你不为这个参数赋值，Python会提供这个值。
这个特别的变量指对象本身，按照惯例它的名称是self。（类似于c#的this指针）
类的方法区别于普通方法是多了一个self指针

__init__方法：属于python语言的构造函数，一个类只能有一个__init__方法
__del__方法：属于python语言的析构函数，它在对象消逝的时候被调用。
当对象不再被使用时，__del__方法运行，但是很难保证这个方法究竟在 什么时候 运行。如果你想要指明它的运行，你就得使用del语句。

